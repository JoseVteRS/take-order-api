generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String       @id @default(dbgenerated("concat('tnt_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name        String?
  plan        Plan?        @default(FREE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  users       User[]
  restaurants Restaurant[]
  categories  Category[]
  dishes      Dish[]
}

model User {
  id          String       @id @default(dbgenerated("concat('usr_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  email       String       @unique
  name        String?
  password    String?
  avatar      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tenantId    String
  active      Boolean      @default(false)
  activeToken String?      @default(uuid())
  role        Role[]       @default([USER])
  restaurants Restaurant[]
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
}

model Restaurant {
  id         String     @id @default(dbgenerated("concat('rest_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime?  @updatedAt
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  tenantId   String
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  dishes     Dish[]
  categories Category[]
}

model Dish {
  id           String     @id @default(dbgenerated("concat('dish_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name         String
  description  String?
  price        Int        @default(0)
  allergens    String[]   @default([])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  tenantId     String
}

model Category {
  id           String     @id @default(dbgenerated("concat('cat_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name         String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  tenantId     String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}

enum Role {
  ADMIN
  USER
  BILLING
  OWNER
}

enum Plan {
  PRO_MONTHLY
  PRO_YEARLY
  FREE
}
